name: Deploy to Homelab

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # No longer needed - removed SSH setup to avoid timeout issues

      - name: Create .env file (using GitHub built-in env handling)
        env:
          PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
          PROXMOX_USER: ${{ secrets.PROXMOX_USER }}
          PROXMOX_TOKEN_NAME: ${{ secrets.PROXMOX_TOKEN_NAME }}
          PROXMOX_TOKEN_VALUE: ${{ secrets.PROXMOX_TOKEN_VALUE }}
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          DOCKER_PORT: ${{ secrets.DOCKER_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        run: |
          # Use env defined above to create .env file
          env | grep -E '^(PROXMOX_|DOCKER_|DATABASE_URL|GITHUB_TOKEN|SECRET_KEY|SESSION_SECRET)' > .env
          echo "FLASK_ENV=production" >> .env
          echo "Created .env file successfully."

      # Skip SSH copy - we'll use direct update to Portainer
      - name: Check out project and prepare deployment
        run: |
          # We'll skip the direct SSH copy to the server, as it's causing connection timeouts
          # Instead, we'll rely on the Portainer API to pull directly from GitHub
          echo "Preparing for direct Portainer deployment..."
          echo "Created .env file will be used by the GitHub Action"

      - name: Update Portainer stack directly
        run: |
          # Install jq
          sudo apt-get update && sudo apt-get install -y jq curl
          
          # Execute the updated direct Portainer API script
          bash .github/scripts/update-portainer.sh \
            "${{ secrets.PORTAINER_URL }}" \
            "${{ secrets.PORTAINER_API_KEY }}" \
            "homelab-dashboard"